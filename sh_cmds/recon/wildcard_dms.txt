#!/bin/bash

# Ultimate Wildcard Subdomain Enumeration Script
# Version: 4.1
# Usage: ./subdomain_enum.sh <wildcard_domains.txt> <output_file>
# Features:
# - Handles wildcard domains (e.g., *.example.com)
# - Replaces * with domain during processing
# - Comprehensive subdomain enumeration
# - All results in single organized file

# Configuration
WORDLIST="/usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt"
RESOLVERS_FILE="/usr/share/seclists/Miscellaneous/dns-resolvers.txt"
THREADS=50
TIMEOUT=10
RATE_LIMIT=200
TEMP_DIR=$(mktemp -d)
HTTP_PROBES=true
ALIVE_CHECK=true
PORT_SCAN=false
SCREENSHOTS=false

OUTPUT_DIR=""                # Will be set from parameter
OUTPUT_FILE=""               # Will be generated automatically


# Tools check
check_tools() {
    local tools=("massdns" "httprobe" "anew" "subfinder" "amass" "assetfinder" "findomain" "httpx")
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            echo "Error: $tool is not installed"
            exit 1
        fi
    done
}

# Initialize
init() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 <wildcard_domains.txt> <output_file>"
        exit 1
    fi

    INPUT_FILE="$1"
    OUTPUT_DIR="$2"

    # Validate input file exists
    if [ ! -f "$INPUT_FILE" ]; then
        echo "Error: Input file $INPUT_FILE not found"
        exit 1
    fi

    # Create output directory if it doesn't exist
    output_dir=$(dirname "$OUTPUT_FILE")
    mkdir -p "$output_dir" || {
        echo "Error: Failed to create output directory"
        exit 1
    }

    # Set output filename with timestamp
    OUTPUT_FILE="${OUTPUT_DIR}/wildcard_dms_recon_$(date +%Y%m%d_%H%M%S).txt"

    [ -f "$INPUT_FILE" ] || { echo "Error: Input file not found"; exit 1; }
    [ -f "$WORDLIST" ] || { echo "Error: Wordlist not found"; exit 1; }

    # Get fresh resolvers
    echo "[+] Fetching fresh DNS resolvers..."
    curl -s https://public-dns.info/nameservers.txt -o "$RESOLVERS_FILE.tmp" && \
        grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' "$RESOLVERS_FILE.tmp" > "$RESOLVERS_FILE"
    rm -f "$RESOLVERS_FILE.tmp"

    # Initialize output
    echo "Wildcard Subdomain Enumeration Report" > "$OUTPUT_FILE"
    echo "Generated: $(date)" >> "$OUTPUT_FILE"
    echo "Resolvers: $(wc -l < "$RESOLVERS_FILE")" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
}

# Replace wildcard with domain
expand_wildcard() {
    local wildcard="$1"
    if [[ "$wildcard" == *"*"* ]]; then
        # Extract base domain (remove wildcard and leading dot if any)
        echo "${wildcard#\*}" | sed 's/^\.//'
    else
        echo "$wildcard"
    fi
}

# Passive enumeration
passive_enum() {
    local wildcard="$1"
    local output="$2"
    local domain=$(expand_wildcard "$wildcard")
    
    echo "[+] Running passive enumeration for $wildcard (domain: $domain)"
    
    subfinder -d "$domain" -silent | sed "s/^\([^.]*\)\./\\1.${wildcard/\*/}/" | anew "$output"
    assetfinder --subs-only "$domain" | sed "s/^\([^.]*\)\./\\1.${wildcard/\*/}/" | anew "$output"
    findomain -t "$domain" -q | sed "s/^\([^.]*\)\./\\1.${wildcard/\*/}/" | anew "$output"
    amass enum -passive -d "$domain" | sed "s/^\([^.]*\)\./\\1.${wildcard/\*/}/" | anew "$output"
}

# Active enumeration with massdns
active_enum() {
    local wildcard="$1"
    local output="$2"
    local domain=$(expand_wildcard "$wildcard")
    
    echo "[+] Running active enumeration for $wildcard (domain: $domain)"
    
    # Prepare wordlist with wildcard pattern
    sed "s/$/.${wildcard/\*/.}/" "$WORDLIST" > "$TEMP_DIR/wordlist.tmp"
    
    # Run massdns
    massdns -r "$RESOLVERS_FILE" -t A -o S -w "$TEMP_DIR/massdns.out" \
        --root -q --retry SERVFAIL --retry REFUSED --retry NOERROR \
        --processes "$THREADS" --socket-count "$THREADS" \
        --rate-limit "$RATE_LIMIT" "$TEMP_DIR/wordlist.tmp" 2>/dev/null
    
    # Process results and maintain wildcard pattern
    grep -E "^[a-zA-Z0-9.-]+\.${wildcard/\*/}\. A" "$TEMP_DIR/massdns.out" | \
        awk '{print $1}' | sed 's/\.$//' | anew "$output"
    
    rm "$TEMP_DIR/wordlist.tmp" "$TEMP_DIR/massdns.out"
}

# Check live hosts
check_alive() {
    local input="$1"
    local output="$2"
    
    echo "[+] Checking live hosts"
    
    httprobe -c 50 -t 3000 < "$input" | anew "$output.alive"
    httpx -silent -status-code -title -tech-detect -o "$output.httpx" < "$input.alive"
    
    if [ "$PORT_SCAN" = true ]; then
        naabu -silent -list "$input.alive" -o "$output.naabu"
    fi
    
    if [ "$SCREENSHOTS" = true ]; then
        aquatone -out "$TEMP_DIR/aquatone" -ports "80,443,8080,8443" < "$input.alive"
    fi
}

# Process wildcard domain
process_wildcard() {
    local wildcard="$1"
    local wildcard_safe=$(echo "$wildcard" | tr -d '*' | tr '.' '_')
    local domain_output="$TEMP_DIR/${wildcard_safe}.txt"
    
    echo "[*] Processing wildcard domain: $wildcard"
    
    # Passive + active enum
    passive_enum "$wildcard" "$domain_output"
    active_enum "$wildcard" "$domain_output"
    
    # Add to main output
    echo "" >> "$OUTPUT_FILE"
    echo "=== Wildcard Domain: $wildcard ===" >> "$OUTPUT_FILE"
    echo "=== Subdomains ($(wc -l < "$domain_output")) ===" >> "$OUTPUT_FILE"
    cat "$domain_output" >> "$OUTPUT_FILE"
    
    # Live checks
    if [ "$ALIVE_CHECK" = true ]; then
        check_alive "$domain_output" "$domain_output"
        echo "" >> "$OUTPUT_FILE"
        echo "=== Live Hosts ===" >> "$OUTPUT_FILE"
        cat "$domain_output.httpx" >> "$OUTPUT_FILE"
    fi
    
    rm "$domain_output"*
}

# Main
check_tools
init "$@"

echo "[*] Starting wildcard domain enumeration"
echo "[*] Threads: $THREADS"
echo "[*] Rate limit: $RATE_LIMIT qps"

while IFS= read -r wildcard || [[ -n "$wildcard" ]]; do
    wildcard=$(echo "$wildcard" | tr -d '\r\n' | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
    [[ -z "$wildcard" ]] && continue
    [[ "$wildcard" =~ ^# ]] && continue
    
    process_wildcard "$wildcard" &
    
    # Limit concurrency
    while [ $(jobs -r -p | wc -l) -ge "$THREADS" ]; do
        sleep 1
    done
done < "$INPUT_FILE"

wait

# Final cleanup
rm -rf "$TEMP_DIR"

echo "[*] Wildcard enumeration completed"
echo "[*] Results saved to $OUTPUT_FILE"